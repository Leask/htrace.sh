#!/usr/bin/env bash

# shellcheck shell=bash

# ``````````````````````````````````````````````````````````````````````````````
# Function name: DomainCertCheck()
#
# Description:
#   Check domain certificate.
#
# Usage:
#   DomainCertCheck domain
#
# Examples:
#   DomainCertCheck example.com
#

function DomainCertCheck() {

  # shellcheck disable=SC2034
  local _FUNCTION_ID="DomainCertCheck"
  local _STATE=0

  # shellcheck disable=SC2034,SC2154
  _ssl_remote_socket="${_domain_ip}:${_domain_port}"
  # shellcheck disable=SC2154
  _ssl_domain_name="$_domain_name"

  # Alternative:
  #   echo | \
  #   openssl s_client -servername "$_ssl_domain_name" \
  #   -connect "$_ssl_remote_socket" 2>/dev/null | openssl x509 -text -noout
  _ssl_domain_cert=$(echo | \
                     openssl s_client -servername "$_ssl_domain_name" \
                     -connect "$_ssl_remote_socket" 2>/dev/null | \
                     sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p')

  _ssl_domain_cert_non_sni=$(echo | \
                     openssl s_client \
                     -connect "$_ssl_remote_socket" 2>/dev/null | \
                     sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p')

  _ssl_domain_names=$(echo "$_ssl_domain_cert" | \
                     openssl x509 -noout -text | \
                     sed -ne 's/^\( *\)Subject:/\1/p;/X509v3 Subject Alternative Name/{
                     N;s/^.*\n//;:a;s/^\( *\)\(.*\), /\1\2\n\1/;ta;p;q; }' | \
                     sed -e 's/^[ \t]*//' | \
                     tr -d '"')

  if [[ ! -z "$_ssl_domain_cert_non_sni" ]] ; then

    _ssl_domain_names_non_sni=$(echo "$_ssl_domain_cert_non_sni" | \
                       openssl x509 -noout -text | \
                       sed -ne 's/^\( *\)Subject:/\1/p;/X509v3 Subject Alternative Name/{
                       N;s/^.*\n//;:a;s/^\( *\)\(.*\), /\1\2\n\1/;ta;p;q; }' | \
                       sed -e 's/^[ \t]*//' | \
                       tr -d '"')

  fi

  _ssl_domain_issuer=$(echo "$_ssl_domain_cert" | \
                     openssl x509 -noout -text | \
                     grep "Issuer:" | \
                     cut -d ":" -f2- | tr -s ' ' | \
                     sed -e 's/^[ \t]*//' | \
                     tr -d '"')

  _ssl_domain_subject=$(echo "$_ssl_domain_cert" | \
                     openssl x509 -noout -text | \
                     grep "Subject:" | \
                     cut -d ":" -f2- | tr -s ' ' | \
                     sed -e 's/^[ \t]*//' | \
                     tr -d '"')

  _ssl_domain_not_before=$(echo "$_ssl_domain_cert" | \
                     openssl x509 -noout -text | \
                     grep "Not Before:" | \
                     cut -d ":" -f2- | tr -s ' ' | \
                     sed -e 's/^[ \t]*//' | \
                     tr -d '"')

  _ssl_domain_not_after=$(echo "$_ssl_domain_cert" | \
                     openssl x509 -noout -text | \
                     grep "Not After :" | \
                     cut -d ":" -f2- | tr -s ' ' | \
                     sed -e 's/^[ \t]*//' | \
                     tr -d '"')

  _ssl_domain_public_key=$(echo "$_ssl_domain_cert" | \
                     openssl x509 -noout -text | \
                     grep "Public-Key:" | \
                     cut -d ":" -f2- | tr -s ' ' | tr -d '()' | \
                     sed -e 's/^[ \t]*//' | \
                     tr -d '"')

  _ssl_domain_signature=$(echo "$_ssl_domain_cert" | \
                     openssl x509 -noout -text | \
                     grep "Signature Algorithm:" | head -n 1 | \
                     cut -d ":" -f2- | tr -s ' ' | tr -d '()' | \
                     sed -e 's/^[ \t]*//' | \
                     tr -d '"')

  _ssl_domain_issuer_o=$(echo "$_ssl_domain_issuer" | \
                     grep -o "O =.*" | \
                     cut -d "=" -f2- | \
                     cut -d "," -f1 | \
                     awk '{$1=$1};1')

  _ssl_domain_issuer_cn=$(echo "$_ssl_domain_issuer" | \
                     grep -o "CN =.*" | \
                     cut -d "=" -f2- | \
                     cut -d "," -f1 | \
                     awk '{$1=$1};1')

  _ssl_domain_subject_o=$(echo "$_ssl_domain_subject" | \
                     tr ',' '\n' | \
                     grep -o "O =.*" | \
                     cut -d "=" -f2- | \
                     cut -d "," -f1 | \
                     awk '{$1=$1};1' | \
                     tr '\n' ' ' | \
                     tr -d \'\" | sed 's/ *$//' | \
                     tr -d '"')

  _ssl_domain_subject_ou=$(echo "$_ssl_domain_subject" | \
                     tr ',' '\n' | \
                     grep -o "OU =.*" | \
                     cut -d "=" -f2- | \
                     cut -d "," -f1 | \
                     awk '{$1=$1};1' | \
                     tr '\n' ' ' | \
                     tr -d \'\" | sed 's/ *$//' | \
                     tr -d '"')

  _ssl_domain_cn=$(echo "$_ssl_domain_names" | \
                     grep -o "CN =.*" | \
                     cut -d "=" -f2- | \
                     sed 's/^\(.*\),.*$/\1/' | \
                     cut -d "," -f1 | \
                     awk '{$1=$1};1')

  _ssl_domain_san=$(echo "$_ssl_domain_names" | \
                     grep "DNS:" | \
                     cut -d ":" -f2- | \
                     tr '\n' ' ')

  _ssl_domain_not_after_expr="$_ssl_domain_not_after"

  if [[ "$_ssl_domain_public_key" == "4096 bit" ]] || \
     [[ "$_ssl_domain_public_key" == "256 bit" ]] ; then

    # shellcheck disable=SC2154
    local _pkey_trgb="$g2_trgb"

  elif [[ "$_ssl_domain_public_key" == "2048 bit" ]] || \
       [[ "$_ssl_domain_public_key" == "224 bit" ]] || \
       [[ "$_ssl_domain_public_key" == "192 bit" ]] ; then

    # shellcheck disable=SC2154
    local _pkey_trgb="$d2_trgb"

  else

    # shellcheck disable=SC2154
    local _pkey_trgb="$e2_trgb"

  fi

  # shellcheck disable=SC2154
  if [[ "$ssl_state" -eq 1 ]] ; then

    local _equal_state="0"
    export _validity_state="0"
    local _all_common_names="$_ssl_domain_cn $_ssl_domain_san"

    IFS=" " read -r -a _common_names <<< "$(sort <<<"$_all_common_names")"
    for _cn in "${_common_names[@]}" ; do

      if [[ "$_ssl_domain_name" == "$_cn" ]] ; then

        # shellcheck disable=SC2034
        _equal_state="1"

        break

      else

        if [[ "$_cn" = *"*"* ]] ; then

          _cn_crt=$(echo "$_cn" | cut -d "." -f2-)
          _cn_dom=$(echo "$_ssl_domain_name" | cut -d "." -f2-)

          if [[ "$_cn_crt" == "$_cn_dom" ]] ; then

            # shellcheck disable=SC2034
            _equal_state="1"

            break

          fi

        fi

      fi

    done

    unset IFS

    # shellcheck disable=SC2004
    _now_epoch=$(date +%s)
    _expiry_epoch=$(date -d "$_ssl_domain_not_after_expr" +%s)
    _expiry_epoch_to_end="$(((_expiry_epoch - _now_epoch) / (3600 * 24)))"

    if [[ "$_expiry_epoch" -gt "$_now_epoch" ]] ; then

      if [[ "$_expiry_epoch_to_end" -le 7 ]] ; then

        _expr_time_msg="$_expiry_epoch_to_end days to expired"
        _expr_time_trgb="$d2_trgb"

      elif [[ "$_expiry_epoch_to_end" -le 2 ]] ; then

        _expr_time_msg="$_expiry_epoch_to_end days to expired"
        _expr_time_trgb="$i_trgb"

      else

        _expr_time_msg="$_expiry_epoch_to_end days to expired"
        _expr_time_trgb="$g2_trgb"

      fi

    else

      _expr_time_msg="expired"
      _expr_time_trgb="$e2_trgb"

    fi

    # shellcheck disable=SC2086,SC2154
    if [[ "$HTRACE_COLORS" == "off" ]] ; then

      # shellcheck disable=SC2086,SC2154
      printf '         public-key(%s), ' \
             "$_ssl_domain_public_key"

      # shellcheck disable=SC2086,SC2154
      printf 'signature(%s)\n' \
             "$_ssl_domain_signature"

      # shellcheck disable=SC2086,SC2154
      printf '         date: %s / %s (%s)\n' \
             "$_ssl_domain_not_before" "$_ssl_domain_not_after" "$_expr_time_msg"

    else

      # shellcheck disable=SC2086,SC2154
      printf '         public-key(\e['${_pkey_trgb}'m%s\e[m), ' \
             "$_ssl_domain_public_key"

      # shellcheck disable=SC2086,SC2154
      printf 'signature(\e['${v_trgb}'m%s\e[m)\n' \
             "$_ssl_domain_signature"

      # shellcheck disable=SC2086,SC2154
      printf '         date: \e['${p_trgb}'m%s / %s\e[m (\e['${_expr_time_trgb}'m%s\e[m)\n' \
             "$_ssl_domain_not_before" "$_ssl_domain_not_after" "$_expr_time_msg"

    fi

    if [[ -z "$_ssl_domain_issuer_o" ]] && \
       [[ -z "$_ssl_domain_issuer_cn" ]] ; then

      # shellcheck disable=SC2086,SC2154
      printf '         issuer: <empty>\n'

    elif [[ -z "$_ssl_domain_issuer_o" ]] ; then

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        printf '         issuer: %s\n' \
               "$_ssl_domain_issuer_o"

      else

        printf '         issuer: \e['${p_trgb}'m%s\e[m\n' \
               "$_ssl_domain_issuer_o"

      fi

    elif [[ -z "$_ssl_domain_issuer_cn" ]] ; then

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        # shellcheck disable=SC2086,SC2154
        printf '         issuer: (%s)\n' \
               "$_ssl_domain_issuer_cn"

      else

        # shellcheck disable=SC2086,SC2154
        printf '         issuer: (\e['${x_trgb}'m%s\e[m)\n' \
               "$_ssl_domain_issuer_cn"

      fi

    else

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        # shellcheck disable=SC2086,SC2154
        printf '         issuer: %s (%s)\n' \
               "$_ssl_domain_issuer_o" "$_ssl_domain_issuer_cn"

      else

        # shellcheck disable=SC2086,SC2154
        printf '         issuer: \e['${p_trgb}'m%s\e[m (\e['${x_trgb}'m%s\e[m)\n' \
               "$_ssl_domain_issuer_o" "$_ssl_domain_issuer_cn"

      fi

    fi

    if [[ -z "$_ssl_domain_subject_o" ]] && \
       [[ -z "$_ssl_domain_subject_ou" ]] ; then

      # shellcheck disable=SC2086,SC2154
      printf '         owner: <empty>\n'

    elif [[ -z "$_ssl_domain_subject_ou" ]] ; then

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        # shellcheck disable=SC2086,SC2154
        printf '         owner: %s\n' \
               "$_ssl_domain_subject_o"

      else

        # shellcheck disable=SC2086,SC2154
        printf '         owner: \e['${p_trgb}'m%s\e[m\n' \
               "$_ssl_domain_subject_o"

      fi

    elif [[ -z "$_ssl_domain_subject_o" ]] ; then

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        # shellcheck disable=SC2086,SC2154
        printf '         owner: (%s)\n' \
               "$_ssl_domain_subject_ou"

      else

        # shellcheck disable=SC2086,SC2154
        printf '         owner: (\e['${x_trgb}'m%s\e[m)\n' \
               "$_ssl_domain_subject_ou"

      fi

    else

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        # shellcheck disable=SC2086,SC2154
        printf '         owner: %s (%s)\n' \
               "$_ssl_domain_subject_o" "$_ssl_domain_subject_ou"

      else

        # shellcheck disable=SC2086,SC2154
        printf '         owner: \e['${p_trgb}'m%s\e[m (\e['${x_trgb}'m%s\e[m)\n' \
               "$_ssl_domain_subject_o" "$_ssl_domain_subject_ou"

      fi

    fi

    if [[ -z "$_ssl_domain_cn" ]] ; then

      # shellcheck disable=SC2086,SC2154
      printf '         cn: <empty>\n'

    else

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        # shellcheck disable=SC2086,SC2154
        printf '         cn: %s\n' \
               "$_ssl_domain_cn"

      else

        # shellcheck disable=SC2086,SC2154
        printf '         cn: \e['${p_trgb}'m%s\e[m\n' \
               "$_ssl_domain_cn"

      fi

    fi

    if [[ -z "$_ssl_domain_san" ]] ; then

      # shellcheck disable=SC2086,SC2154
      printf '         san: <empty>\n'

    else

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        # shellcheck disable=SC2086,SC2154
        printf '         san: %s\n' \
               "$_ssl_domain_san"

      else

        # shellcheck disable=SC2086,SC2154
        printf '         san: \e['${x_trgb}'m%s\e[m\n' \
               "$_ssl_domain_san"

      fi

    fi

    # Check SNI vs without-SNI.
    if [[ "$_ssl_domain_names" == "$_ssl_domain_names_non_sni" ]] ; then

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        # shellcheck disable=SC2086,SC2154
        printf '         sni: %s\n' \
               "match"

      else

        # shellcheck disable=SC2086,SC2154
        printf '         sni: \e['${g2_trgb}'m%s\e[m\n' \
               "match"

      fi

    elif [[ -z "$_ssl_domain_cert_non_sni" ]] ; then

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        # shellcheck disable=SC2086,SC2154
        printf '         sni: %s\n' \
               "no peer certificate available"

      else

        # shellcheck disable=SC2086,SC2154
        printf '         sni: \e['${e2_trgb}'m%s\e[m\n' \
               "no peer certificate available"

      fi

    else

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        # shellcheck disable=SC2086,SC2154
        printf '         sni: %s\n' \
               "not match"

      else

        # shellcheck disable=SC2086,SC2154
        printf '         sni: \e['${e2_trgb}'m%s\e[m\n' \
               "not match"

      fi

    fi

    if [[ "$_equal_state" -eq 1 ]] ; then

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        # shellcheck disable=SC2086,SC2154
        printf '         validity: %s\n' \
               "match"

      else

        # shellcheck disable=SC2086,SC2154
        printf '         validity: \e['${g2_trgb}'m%s\e[m\n' \
               "match"

      fi

    else

      # shellcheck disable=SC2086,SC2154
      if [[ "$HTRACE_COLORS" == "off" ]] ; then

        # shellcheck disable=SC2086,SC2154
        printf '         validity: %s\n' \
               "is not valid (hostname mismatch)"

      else

        # shellcheck disable=SC2086,SC2154
        printf '         validity: \e['${e2_trgb}'m%s\e[m\n' \
               "is not valid (hostname mismatch)"

      fi

      _validity_state="1"

    fi

  fi

  return $_STATE

}
